name: build

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    # runs-on: macos-latest
    strategy:
      matrix:
        #python-version: [3.5, 3.6, 3.7, 3.8]
        #os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        #os: [ubuntu-latest]
        #os: [windows-latest]
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies (Linux)
      env:
        MMS_AUTH_U: ${{ secrets.MMS_AUTH_U }}
        MMS_AUTH_P: ${{ secrets.MMS_AUTH_P }}
        VIRES_TOKEN: ${{ secrets.VIRES_AUTH }}
      run: |
          python -m pip install --upgrade pip
          pip install build
          pip install coveralls
          pip install basemap
          pip install mt-metadata
          pip install obspy
          pip install 'mth5>=0.4.9'
          pip install 'moto[server]'
          python -m build
          pip install dist/*.whl
          python -m pyspedas.projects.mms.tests.setup_tests
      if: matrix.os == 'ubuntu-latest'
    - name: Install dependencies (Windows)
      env:
        MMS_AUTH_U: ${{ secrets.MMS_AUTH_U }}
        MMS_AUTH_P: ${{ secrets.MMS_AUTH_P }}
        VIRES_TOKEN: ${{ secrets.VIRES_AUTH }}
      run: |
          python -m pip install --upgrade pip
          pip install build
          pip install coveralls
          pip install basemap
          pip install mt-metadata
          pip install obspy
          pip install 'mth5>=0.4.9'
          pip install 'moto[server]'
          python -m build
          pip install dist/*.whl
          python -m pyspedas.projects.mms.tests.setup_tests
      if: matrix.os == 'windows-latest'
    - name: Install dependencies (macOS)
      env:
        MMS_AUTH_U: ${{ secrets.MMS_AUTH_U }}
        MMS_AUTH_P: ${{ secrets.MMS_AUTH_P }}
        VIRES_TOKEN: ${{ secrets.VIRES_AUTH }}
      run: |
          python -m pip install --upgrade pip
          pip install build
          pip install coveralls
          pip install basemap
          pip install mt-metadata
          pip install obspy
          pip install 'mth5>=0.4.9'
          pip install 'moto[server]'
          python -m build
          pip install dist/*.whl
          python -m pyspedas.projects.mms.tests.setup_tests
      if: matrix.os == 'macos-latest'
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=127 --exclude 'erg'
        # exit-zero treats all errors as warnings. 
        flake8 . --count --exit-zero --max-complexity=10 --statistics --max-line-length=127
    - name: Hide the repo copy so imports use site-packages
      run: |
        # keep it around for debugging; delete instead if you want the space back
        if [ -d pyspedas ]; then mv pyspedas __repo_pyspedas; fi

    - name: Sanity check import location
      shell: python
      run: |
        import pyspedas, pathlib, sys
        p = pathlib.Path(pyspedas.__file__).resolve()
        print("pyspedas import path:", p)
        print("sys.path[0]:", sys.path[0])
        assert "site-packages" in str(p), f"Still importing from repo: {p}"

    - name: Test with unittest
      if: (github.event_name == 'pull_request' && github.base_ref == 'master') || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/refactor_projects' || github.ref == 'refs/heads/pyspedas_2_0_dev'
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        VIRES_TOKEN: ${{ secrets.VIRES_AUTH }}
        SPEDAS_DATA_DIR: data
        ACE_DATA_DIR: ace_data/
        BARREL_DATA_DIR: barrel_data/
        CLUSTER_DATA_DIR: cluster_data/
        DSC_DATA_DIR: dsc_data/
        CSSWE_DATA_DIR: csswe_data/
        EQUATORS_DATA_DIR: eqs_data/
        FAST_DATA_DIR: fast_data/
        GEOTAIL_DATA_DIR: geotail_data/
        GOES_DATA_DIR: goes_data/
        IMAGE_DATA_DIR: img_data/
        MICA_DATA_DIR: mica_data/
        MMS_DATA_DIR: mms_data/
        OMNI_DATA_DIR: omni_data/
        POES_DATA_DIR: poes_data/
        POLAR_DATA_DIR: polar_data/

        PSP_DATA_DIR: psp_data/
        RBSP_DATA_DIR: rbsp_data/
        SOLO_DATA_DIR: solo_data/
        STEREO_DATA_DIR: stereo_data/
        THM_DATA_DIR: themis_data/
        TWINS_DATA_DIR: twins_data/
        ULY_DATA_DIR: uly_data/
        WIND_DATA_DIR: wind_data/
        LANL_DATA_DIR: lanl_data/
        CNOFS_DATA_DIR: cnofs_data/
        ST5_DATA_DIR: st5_data/
        PYTPLOT_LOGGING_LEVEL: error
      run: |
        echo "========================================================="
        # Show the free disk space on this filesystem
        echo "Disk space prior to starting tests:"
        df -h .
        # Show the IP address the test suite is running from (useful for troubleshooting data server access issues)
        echo "========================================================="
        echo IP address for this test:
        coverage run --debug=pathmap -a -m pyspedas.utilities.tests.test_find_ip_address
        echo Starting mms data_rate_segments tests at `date`
        coverage run --debug=pathmap -a  -m pyspedas.projects.mms.tests.data_rate_segments
        echo "========================================================="
        # Show the free disk space on this filesystem
        echo "Disk space after all tests:"
        df -h .
        echo "========================================================="        

        echo Done with tests at `date`
        
        echo "Restoring pyspedas directory to produce coverage report"
        mv __repo_pyspedas pyspedas

        echo "Producing coverage report"
        coveralls
